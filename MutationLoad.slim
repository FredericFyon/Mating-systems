initialize()
{
	if(exists("slimgui"))
	{
		defineConstant("mu",5e-4);
		defineConstant("r",1e-2);
		defineConstant("tGen",150002);
		defineConstant("tDistrib",150002);
		defineConstant("Npop",500);
		defineConstant("Nloc",100);
		defineConstant("it",1);
	}
	
	suffix = ".csv";
	defineConstant("nameFileSubst","C:/Users/Fred/Dropbox/HybridMutationLoad/SLiM/Results_SLiM/Mutation Load/mu" + format("%.1e",mu) + " r" + format("%.1e",r) +"/fixedSubst_mu" + format("%.1e",mu) + "_r" + format("%.1e",r) + "_" + it + suffix);
	defineConstant("nameFileNMut","C:/Users/Fred/Dropbox/HybridMutationLoad/SLiM/Results_SLiM/Mutation Load/mu" + format("%.1e",mu) + " r" + format("%.1e",r) +"/NumbMut_mu" + format("%.1e",mu) + "_r" + format("%.1e",r) + "_" + it + suffix);
	defineConstant("nameFileDom","C:/Users/Fred/Dropbox/HybridMutationLoad/SLiM/Results_SLiM/Mutation Load/mu" + format("%.1e",mu) + " r" + format("%.1e",r) +"/Dom_mu" + format("%.1e",mu) + "_r"  + format("%.1e",r) + "_" + it + suffix);
	defineConstant("nameFileSelecCoeff","C:/Users/Fred/Dropbox/HybridMutationLoad/SLiM/Results_SLiM/Mutation Load/mu" + format("%.1e",mu) + " r" + format("%.1e",r) +"/selectCoeff_mu" + format("%.1e",mu) + "_r" + format("%.1e",r) + "_" + it + suffix);
//	defineConstant("nameFileFreqMutDistrib1","C:/Users/Fred/Dropbox/HybridMutationLoad/SLiM/Results_SLiM/mu" + format("%.1e",mu) + " r" + format("%.1e",r) +"/freqMutDistribPop1_mu" + format("%.1e",mu) + "_r" + format("%.1e",r) + "_" + it + suffix);
//	defineConstant("nameFileFreqMutDistrib2","C:/Users/Fred/Dropbox/HybridMutationLoad/SLiM/Results_SLiM/mu" + format("%.1e",mu) + " r" + format("%.1e",r) +"/freqMutDistribPop2_mu" + format("%.1e",mu) + "_r" + format("%.1e",r) + "_" + it + suffix);
	defineConstant("nameFileHeteroz","C:/Users/Fred/Dropbox/HybridMutationLoad/SLiM/Results_SLiM/Mutation Load/mu" + format("%.1e",mu) + " r" + format("%.1e",r) +"/heterozygosity_mu" + format("%.1e",mu) + "_r" + format("%.1e",r) + "_" + it + suffix);
	defineConstant("nameFileFitness","C:/Users/Fred/Dropbox/HybridMutationLoad/SLiM/Results_SLiM/Mutation Load/mu" + format("%.1e",mu) + " r" + format("%.1e",r) +"/fitness_mu" + format("%.1e",mu) + "_r" + format("%.1e",r) + "_" + it + suffix);

	initializeMutationRate(mu);
	initializeMutationType("m1", 0.5, "e", -0.1);
	initializeGenomicElementType("g1", m1, 1.0);
	for (i in 1:Nloc)
		initializeGenomicElement(g1, i - 1, i - 1);
	initializeRecombinationRate(r);
}

1
{
	sim.rescheduleScriptBlock(s1,start=2, end=tGen);
	sim.rescheduleScriptBlock(s2,start=tGen,end=tGen);
	
	sim.addSubpop("p1", Npop);
	sim.addSubpop("p2", Npop);
	p2.setSelfingRate(1.0);
	p1.setMigrationRates(p2, 0.0);
	p2.setMigrationRates(p1, 0.0);
}

mutation(m1)
{
	Selec = mut.selectionCoeff;
	Dom = exp(7 * Selec) / 2;
	mut.setValue("dom", Dom);
	return T;
}

fitness(m1)
{
	if (homozygous)
		return 1.0 + mut.selectionCoeff;
	else
		return 1.0 + mut.getValue("dom") * mut.selectionCoeff;
}

s1 2:200000 early()
{
	t = sim.generation;
	muts = sim.mutationsOfType(m1);
	isMutPop1 = (sim.mutationsOfType(m1).subpopID == 1);
	isMutPop2 = (sim.mutationsOfType(m1).subpopID == 2);
	muts1 = muts[isMutPop1];
	muts2 = muts[isMutPop2];
	
	if(t%10000 == 0) catn("Iteration " + it + ": t = " + t);
	
	if (t % 100 == 2)
	{
	
		//To follow the number of deleterious mutations fixed in each population
		subst1 = sum(sim.mutationFrequencies(p1, muts1) == 1.0);
		subst2 = sum(sim.mutationFrequencies(p2, muts2) == 1.0);
		lineSubst = t + "," + subst1 + "," + subst2;
		if(t == 2)
		{
			if (!writeFile(nameFileSubst, lineSubst, append=F))
			{
				stop("Error when writing the file.");
			}
		}
		else
		{
			if (!writeFile(nameFileSubst, lineSubst, append=T))
			{
				stop("Error when writing the file.");
			}
		}
		

		//
//		//To follow total number of mutations
		Nmuts1 = size(muts1);
		Nmuts2 = size(muts2);
		lineNMut = t + "," + Nmuts1 + "," + Nmuts2;
		if(t == 2)
		{
			if (!writeFile(nameFileNMut, lineNMut, append=F))
			{
				stop("Error when writing the file.");
			}
		}
		else
		{
			if (!writeFile(nameFileNMut, lineNMut, append=T))
			{
				stop("Error when writing the file.");
			}
		}

		//
//		//To follow mean dominance of mutations
		if(size(muts1) > 0)		
		{
			domMuts1 = mean(muts1.getValue("dom"));
		}
		else
		{
			domMuts1 = 0;
		}
		if(size(muts2) > 0)
		{
			domMuts2 = mean(muts2.getValue("dom"));
		}
		else
		{
			domMuts2 = 0;
		}		
		
		lineDom = t + "," + domMuts1 + "," + domMuts2;
		if(t == 2)
		{
			if (!writeFile(nameFileDom, lineDom, append=F))
			{
				stop("Error when writing the file.");
			}
		}
		else
		{
			if (!writeFile(nameFileDom, lineDom, append=T))
			{
				stop("Error when writing the file.");
			}
		}

//		//
//		//To follow mean selective coefficient of mutations
		if(size(muts1) > 0)		
		{
			selecMuts1 = mean(muts1.selectionCoeff);
		}
		else
		{
			selecMuts1 = 0;
		}
		if(size(muts2) > 0)
		{
			selecMuts2 = mean(muts2.selectionCoeff);
		}
		else
		{
			selecMuts2 = 0;
		}		
		lineSelecCoeff = t + "," + selecMuts1 + "," + selecMuts2;
		if(t == 2)
		{
			if (!writeFile(nameFileSelecCoeff, lineSelecCoeff, append=F))
			{
				stop("Error when writing the file.");
			}
		}
		else
		{
			if (!writeFile(nameFileSelecCoeff, lineSelecCoeff, append=T))
			{
				stop("Error when writing the file.");
			}
		}

//		//Heterozygosity

		heteroz1 = 0;
		heteroz2 = 0;
		
		for (k in 1:Npop)
		{
			heteroz1 = heteroz1 + calcPairHeterozygosity(p1.individuals.genome1[k-1],p1.individuals.genome2[k-1]);
			heteroz2 = heteroz2 + calcPairHeterozygosity(p2.individuals.genome1[k-1],p2.individuals.genome2[k-1]);
		}

		heteroz1 = heteroz1/Npop;
		heteroz2 = heteroz2/Npop;

		lineHeteroz = t + "," + heteroz1 + "," + heteroz2;

		if(t == 2)
		{
			if (!writeFile(nameFileHeteroz, lineHeteroz, append=F))
			{
				stop("Error when writing the file.");
			}
		}
		else
		{
			if (!writeFile(nameFileHeteroz, lineHeteroz, append=T))
			{
				stop("Error when writing the file.");
			}
		}
		
		
	//To follow population mean fitness
	fit1 = mean(p1.cachedFitness(NULL));
	fit2 = mean(p2.cachedFitness(NULL));
	lineFit = t + " , " + fit1 + " , " + fit2;
	if(t == 2)
		{
			if (!writeFile(nameFileFitness, lineFit, append=F))
			{
				stop("Error when writing the file.");
			}
		}
		else
		{
			if (!writeFile(nameFileFitness, lineFit, append=T))
			{
				stop("Error when writing the file.");
			}
		}
	}
	
	//Distribution of mutation frequencies and heterozygosity
//	if(t == tDistrib)
//	{
//		if(size(muts1) > 0)		
//		{
//			//distrib1 = p1.genomes.mutations.selectionCoeff;
//			distrib1 = sim.mutationFrequencies(p1);
//			a=0;
//			for (i in 1:size(distrib1))
//			{
//				if(distrib1[i-1] != 0 & distrib1[i-1] != 1)
//				{
//					a=a+1;					
//					lineFreqMutDistrib1 = distrib1[i-1] + ",";
//					if(a == 1)
//					{
//						if (!writeFile(nameFileFreqMutDistrib1, lineFreqMutDistrib1, append=F))
//						{
//							stop("Error when writing the file.");
//						}
//					}
//					else
//					{
//						if (!writeFile(nameFileFreqMutDistrib1, lineFreqMutDistrib1, append=T))
//						{
//							stop("Error when writing the file.");
//						}
//					}
//				}
//			}
//		}
//		if(size(muts2) > 0)		
//		{
//			//distrib2 = p2.genomes.mutations.selectionCoeff;
//			distrib2 = sim.mutationFrequencies(p2);
//			b=0;
//			for (j in 1:size(distrib2))
//			{
//				if(distrib2[j-1] != 0 & distrib2[j-1] != 1)
//				{
//					b=b+1;
//					lineFreqMutDistrib2 = distrib2[j-1] + ",";
//					if(b == 1)
//					{
//						if (!writeFile(nameFileFreqMutDistrib2, lineFreqMutDistrib2, append=F))
//						{
//							stop("Error when writing the file.");
//						}
//					}
//					else
//					{
//						if (!writeFile(nameFileFreqMutDistrib2, lineFreqMutDistrib2, append=T))
//						{
//							stop("Error when writing the file.");
//						}
//					}
//				}
//			}
//		}
//	}
}


s2 150002 late()
{
	catn("The simulation has now ended");
	sim.simulationFinished();
}
